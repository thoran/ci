#!/usr/bin/env ruby
# build

# 20200206
# 0.0.0

# Usage:
# 1. build
# 2. build <branch_name>

# Examples:
# 1. Assume that we are inside the git repository and that the branch is thoran/feature/awesome...
# $ build
# => open https://buildkite.com/buildkite_username/buildkite_repository/builds?branch=thoran%2Ffeature%2Fawesome
# 2. Assume that we are inside the git repository and that the branch is thoran/feature/awesome, we can still open a different branch by supplying that...
# $ build master
# => open https://buildkite.com/buildkite_username/buildkite_repository/builds?branch=master

# Notes:
# 1. This assumes that the repository url is of the form hostname:username/repository_ame.
# 2. This assumes that the Github username and the Buildkite username are the same.
# 3. It also assumes that the Github repository name and the Buildkite repository name are the same, but this is a fairly safe assumption.

require 'Git/Branch'
require 'Git/Remote'
require 'ImpURI'

def origin_url
  Git::Remote.find('origin').url
end

def path_sans_extension
  ImpURI.parse(origin_url).path.sub(/\.git$/, '')
end

def branch_argument
  Git::Branch.current.to_s.gsub(/\//, '%2F')
end

def parameters
  [
    "branch=#{branch_argument}"
  ]
end

def buildkite_build_url
  ['https://buildkite.com', path_sans_extension, 'builds'].join('/') + '?' + parameters.join('&')
end

def buildkite?
  repository_root = `git rev-parse --show-toplevel`.strip
  candidate_buildkite_directory = [repository_root, '.buildkite'].join('/')
  File.exist?(candidate_buildkite_directory)
end

def main
  if buildkite?
    system("open #{buildkite_build_url}")
  else
    puts "This supports only Buildkite for now."
  end
end

main
