#!/usr/bin/env ruby
# ci

# 20230816
# 0.4.0

# Usage:
# 1. ci
# 2. ci <branch_name>

# Changes since 0.3:
# -/0: Add Travis.
# 1. + Travis
# 2. ~ CIService#detect: + travis
# 3. /ci_service()/ci_service_name()/
# 4. ~ buildkite?(): /ci_service/ci_service_name/
# 5. ~ circleci?(): /ci_service/ci_service_name/
# 6. ~ travis?(): /ci_service/ci_service_name/
# 7. ~ main(): elsif travis?...
# 8. ~ main(): + branch_argument

# Examples:
# 1. Assume that we are inside the git repository and that the branch is thoran/feature/awesome...
# $ ci
# => open https://buildkite.com/username/repository/builds?branch=thoran%2Ffeature%2Fawesome
# 2. Assume that we are inside the git repository and that the branch is thoran/feature/awesome, we can still open a different branch by supplying that...
# $ ci master
# => open https://buildkite.com/username/repository/builds?branch=master

# Notes:
# 1. This assumes that the repository url is of the form hostname:username/repository_name.
# 2. This assumes that the Github username and the Buildkite/CircleCI username are the same.
# 3. This assumes that the Github repository name and the Buildkite/CircleCI repository name are the same, but this is a fairly safe assumption.
# 4. This assumes macOS at least, but any other OS that has the program `open` for use on the command line to open URIs.

require 'Git/Branch'
require 'Git/Remote'
require 'ImpURI'

class CIService
  def initialize(branch:)
    @branch = branch
  end

  def origin_url
    Git::Remote.find('origin').url
  end

  def parameters
    [
      "branch=#{@branch}"
    ]
  end

  def path_sans_extension
    ImpURI.parse(origin_url).path.sub(/\.git$/, '')
  end

  def repo_host
    ImpURI.parse(origin_url).host
  end

  def repo_host_sans_tld
    repo_host.split('.').first
  end

  def detect
    %w{buildkite circleci travis}.each do |candidate_ci_service_name|
      repository_root = `git rev-parse --show-toplevel`.strip
      case candidate_ci_service_name
      when 'buildkite', 'circleci'
        candidate_directory = [repository_root, ".#{candidate_ci_service_name}"].join('/')
        return candidate_ci_service_name if File.exist?(candidate_directory)
      when 'travis'
        candidate_filename = [repository_root, ".#{candidate_ci_service_name}.yml"].join('/')
        return candidate_ci_service_name if File.exist?(candidate_filename)
      end
    end
  end
end

class Buildkite < CIService
  def build_url
    ['https://buildkite.com', path_sans_extension, 'builds'].join('/') + '?' + parameters.join('&')
  end
end

class CircleCI < CIService
  def build_url
    ['https://app.circleci.com', 'pipelines', repo_host_sans_tld, path_sans_extension].join('/') + '?' + parameters.join('&')
  end
end

class Travis < CIService
  def build_url
    ['https://app.travis-ci.com', repo_host_sans_tld, path_sans_extension].join('/')
  end
end

def supplied_branch_argument
  ARGV[0]
end

def default_branch_argument
  Git::Branch.current.to_s.gsub(/\//, '%2F')
end

def branch_argument
  supplied_branch_argument || default_branch_argument
end

def ci_service_name
  @ci_service_name ||= CIService.new(branch: branch_argument).detect
end

# predicate methods

def buildkite?
  ci_service_name == 'buildkite'
end

def circleci?
  ci_service_name == 'circleci'
end

def travis?
  ci_service_name == 'travis'
end

def main
  if buildkite?
    system("open #{Buildkite.new(branch: branch_argument).build_url}")
  elsif circleci?
    system("open #{CircleCI.new(branch: branch_argument).build_url}")
  elsif travis?
    system("open #{Travis.new(branch: branch_argument).build_url}")
  else
    puts "This supports only Buildkite, CircleCI, and Travis for now."
  end
end

main
